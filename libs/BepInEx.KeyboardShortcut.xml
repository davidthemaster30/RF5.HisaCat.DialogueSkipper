<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BepInEx.KeyboardShortcut</name>
    </assembly>
    <members>
        <member name="T:BepInEx.Configuration.KeyboardShortcut">
             <summary>
             A keyboard shortcut that can be used in Update method to check if user presses a key combo. The shortcut is only
             triggered when the user presses the exact combination. For example, <c>F + LeftCtrl</c> will trigger only if user
             presses and holds only LeftCtrl, and then presses F. If any other keys are pressed, the shortcut will not trigger.
            
             Can be used as a value of a setting in <see cref="M:BepInEx.Configuration.ConfigFile.Bind``1(BepInEx.Configuration.ConfigDefinition,``0,BepInEx.Configuration.ConfigDescription)"/>
             to allow user to change this shortcut and have the changes saved.
            
             How to use: Use <see cref="M:BepInEx.Configuration.KeyboardShortcut.IsDown"/> in this class instead of <see cref="M:UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode)"/> in the Update loop.
             </summary>
        </member>
        <member name="F:BepInEx.Configuration.KeyboardShortcut.Empty">
            <summary>
            Shortcut that never triggers.
            </summary>
        </member>
        <member name="F:BepInEx.Configuration.KeyboardShortcut.AllKeyCodes">
            <summary>
            All KeyCode values that can be used in a keyboard shortcut.
            </summary>
        </member>
        <member name="M:BepInEx.Configuration.KeyboardShortcut.#ctor(UnityEngine.KeyCode,UnityEngine.KeyCode[])">
            <summary>
            Create a new keyboard shortcut.
            </summary>
            <param name="mainKey">Main key to press</param>
            <param name="modifiers">Keys that should be held down before main key is registered</param>
        </member>
        <member name="P:BepInEx.Configuration.KeyboardShortcut.MainKey">
            <summary>
            Main key of the key combination. It has to be pressed / let go last for the combination to be triggered.
            If the combination is empty, <see cref="F:UnityEngine.KeyCode.None"/> is returned.
            </summary>
        </member>
        <member name="P:BepInEx.Configuration.KeyboardShortcut.Modifiers">
            <summary>
            Modifiers of the key combination, if any.
            </summary>
        </member>
        <member name="M:BepInEx.Configuration.KeyboardShortcut.Deserialize(System.String)">
            <summary>
            Attempt to deserialize key combination from the string.
            </summary>
        </member>
        <member name="M:BepInEx.Configuration.KeyboardShortcut.Serialize">
            <summary>
            Serialize the key combination into a user readable string.
            </summary>
        </member>
        <member name="M:BepInEx.Configuration.KeyboardShortcut.IsDown">
            <summary>
            Check if the main key was just pressed (Input.GetKeyDown), and specified modifier keys are all pressed
            </summary>
        </member>
        <member name="M:BepInEx.Configuration.KeyboardShortcut.IsPressed">
            <summary>
            Check if the main key is currently held down (Input.GetKey), and specified modifier keys are all pressed
            </summary>
        </member>
        <member name="M:BepInEx.Configuration.KeyboardShortcut.IsUp">
            <summary>
            Check if the main key was just lifted (Input.GetKeyUp), and specified modifier keys are all pressed.
            </summary>
        </member>
        <member name="M:BepInEx.Configuration.KeyboardShortcut.ToString">
            <inheritdoc />
        </member>
        <member name="M:BepInEx.Configuration.KeyboardShortcut.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:BepInEx.Configuration.KeyboardShortcut.GetHashCode">
            <inheritdoc />
        </member>
    </members>
</doc>
